!(function (n, t) {
    'function' == typeof define && define.amd
        ? define(t)
        : 'object' == typeof module
        ? (module.exports = t())
        : ((n.utils = t()), (n.u = t()));
})(this, function () {
    'use strict';
    var n, t, r, e, i, a, o, u, c, s, f, l, g, h, d, p, m, v, N, y, b, S, M, E;
    return (
        (n = {
            all: function (n) {
                return n.every(function (n) {
                    switch (S.of(n)) {
                        case S.ARRAY:
                            return n.length > 0;
                        case S.OBJECT:
                            return m.length(n) > 0;
                        default:
                            return Boolean(n);
                    }
                });
            },
            any: function (n) {
                return n.some(function (n) {
                    switch (S.of(n)) {
                        case S.ARRAY:
                            return n.length > 0;
                        case S.OBJECT:
                            return m.length(n) > 0;
                        default:
                            return Boolean(n);
                    }
                });
            },
            clean: function (t, r) {
                var e = t.slice();
                return (
                    (e = e.filter(function (n) {
                        return !S.isNone(n);
                    })),
                    !0 === r &&
                        (e = e
                            .map(function (t) {
                                var e;
                                switch (S.of(t)) {
                                    case S.ARRAY:
                                        return (e = n.clean(t, r)).length > 0
                                            ? e
                                            : null;
                                    case S.OBJECT:
                                        return (
                                            (e = m.clean(t, r)),
                                            m.length(e) > 0 ? e : null
                                        );
                                    case S.STRING:
                                        return '' !== (e = N.trim(t)) ? t : null;
                                    default:
                                        return t;
                                }
                            })
                            .filter(function (n) {
                                return !S.isNone(n);
                            })),
                    e
                );
            },
            clone: function (t) {
                for (var r, e = t.slice(), i = 0, a = e.length; i < a; i++)
                    switch (((r = e[i]), S.of(r))) {
                        case S.ARRAY:
                            e[i] = n.clone(r);
                            break;
                        case S.DATE:
                            e[i] = o.clone(r);
                            break;
                        case S.OBJECT:
                            e[i] = m.clone(r);
                    }
                return e;
            },
            contains: function (n, t) {
                for (
                    var r, e, i = [t].concat(c.args(arguments, 2)), a = 0, o = i.length;
                    a < o;
                    a++
                ) {
                    (r = i[a]), (e = !1);
                    for (var u = 0, s = n.length; u < s; u++)
                        m.equals(n[u], r) && (e = !0);
                    if (!e) return !1;
                }
                return !0;
            },
            equals: function (n, t) {
                return m.equals(n, t);
            },
            flatten: function (t) {
                for (var r = [], e = 0, i = t.length; e < i; e++)
                    S.isArray(t[e]) ? r.push.apply(r, n.flatten(t[e])) : r.push(t[e]);
                return r;
            },
            index: function (n, t, r) {
                var e,
                    i,
                    a,
                    o = {};
                S.isString(t) && (t = [t]);
                for (var u = 0, c = n.length; u < c; u++) {
                    e = n[u];
                    for (var s = 0, f = t.length; s < f; s++)
                        (i = String(t[s])),
                            (a = String(e[i])),
                            !0 === r
                                ? (o[a] = e)
                                : (S.isUndefined(o[a]) && (o[a] = []), o[a].push(e));
                }
                return o;
            },
            insert: function (n, t, r) {
                return n.splice(t, 0, r), n;
            },
            max: function (t, r) {
                return n.reduce(
                    t,
                    function (n, t) {
                        return S.isFunction(r) ? Math.max(n, r(t)) : Math.max(n, t);
                    },
                    Number.MIN_VALUE
                );
            },
            min: function (t, r) {
                return n.reduce(
                    t,
                    function (n, t) {
                        return S.isFunction(r) ? Math.min(n, r(t)) : Math.min(n, t);
                    },
                    Number.MAX_VALUE
                );
            },
            paginate: function (n, t) {
                var r,
                    e,
                    i = n.length,
                    a = t > 0 ? Math.ceil(i / t) : 0,
                    o = [];
                for (r = 0, e = 0; r < a; r++)
                    (e = r * t), (o[r] = n.slice(e, e + Math.min(t, i)));
                return o;
            },
            reduce: function (n, t, r) {
                for (var e = S.isUndefined(r) ? 0 : r, i = 0, a = n.length; i < a; i++)
                    e = t(e, n[i], i, n);
                return e;
            },
            replace: function (n, t, r) {
                for (var e = 0, i = n.length; e < i; e++)
                    m.equals(n[e], t) && (n[e] = r);
                return n;
            },
            remove: function (n, t) {
                for (
                    var r = [t].concat(c.args(arguments, 2)), e = 0, i = r.length;
                    e < i;
                    e++
                )
                    for (var a = 0, o = n.length; a < o; a++)
                        m.equals(n[a], r[e]) && (n.splice(a, 1), a--, o--);
                return n;
            },
            rotate: function (n, t) {
                var r = d.cycle(t, n.length);
                return n.slice(r).concat(n.slice(0, r));
            },
            shuffle: function (n) {
                for (var t, r, e = n.slice(), i = n.length; i; )
                    (t = v.integer(0, --i)), (r = e.splice(t, 1)), e.push.apply(e, r);
                return e;
            },
            sort: function (n, t) {
                var r = S.isArray,
                    e = S.isObject,
                    i = S.isNumber,
                    a = S.isString;
                return n.sort(function (n, o) {
                    var u, c;
                    if (e(n) && e(o) && a(t))
                        (u = t in n ? n[t] : n), (c = t in o ? o[t] : o);
                    else if (r(n) && r(o) && i(t)) {
                        var s = t;
                        (u = s >= 0 && s < n.length ? n[s] : n),
                            (c = s >= 0 && s < o.length ? o[s] : o);
                    } else (u = n), (c = o);
                    var f = i(u),
                        l = i(c);
                    if (f && l) return u <= c ? -1 : 1;
                    if (f) return -1;
                    if (l) return 1;
                    var g = [u, c];
                    return g.sort(), g.indexOf(u) <= g.indexOf(c) ? -1 : 1;
                });
            },
            sum: function (t, r) {
                return n.reduce(
                    t,
                    function (n, t) {
                        return S.isFunction(r) ? n + r(t) : n + t;
                    },
                    0
                );
            },
            unique: function (n) {
                for (
                    var t,
                        r = [],
                        e = function (n) {
                            return !m.equals(t, n);
                        },
                        i = 0,
                        a = n.length;
                    i < a;
                    i++
                )
                    (t = n[i]), r.every(e) && r.push(t);
                return r;
            },
            unzip: function (t) {
                return n.zip.apply(null, t);
            },
            zip: function (n, t) {
                var r = [n, t].concat(c.args(arguments, 2)),
                    e = 0;
                r.forEach(function (n) {
                    e = 0 === e ? n.length : Math.min(e, n.length);
                });
                for (var i = [], a = 0; a < e; a++) {
                    i[a] = [];
                    for (var o = 0, u = r.length; o < u; o++) i[a][o] = r[o][a];
                }
                return i;
            },
        }),
        (t = {
            CHARS: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
            CHARS_LIST: [
                'A',
                'B',
                'C',
                'D',
                'E',
                'F',
                'G',
                'H',
                'I',
                'J',
                'K',
                'L',
                'M',
                'N',
                'O',
                'P',
                'Q',
                'R',
                'S',
                'T',
                'U',
                'V',
                'W',
                'X',
                'Y',
                'Z',
                'a',
                'b',
                'c',
                'd',
                'e',
                'f',
                'g',
                'h',
                'i',
                'j',
                'k',
                'l',
                'm',
                'n',
                'o',
                'p',
                'q',
                'r',
                's',
                't',
                'u',
                'v',
                'w',
                'x',
                'y',
                'z',
                '0',
                '1',
                '2',
                '3',
                '4',
                '5',
                '6',
                '7',
                '8',
                '9',
                '+',
                '/',
                '=',
            ],
            CHARS_TABLE: {
                'A': 0,
                'B': 1,
                'C': 2,
                'D': 3,
                'E': 4,
                'F': 5,
                'G': 6,
                'H': 7,
                'I': 8,
                'J': 9,
                'K': 10,
                'L': 11,
                'M': 12,
                'N': 13,
                'O': 14,
                'P': 15,
                'Q': 16,
                'R': 17,
                'S': 18,
                'T': 19,
                'U': 20,
                'V': 21,
                'W': 22,
                'X': 23,
                'Y': 24,
                'Z': 25,
                'a': 26,
                'b': 27,
                'c': 28,
                'd': 29,
                'e': 30,
                'f': 31,
                'g': 32,
                'h': 33,
                'i': 34,
                'j': 35,
                'k': 36,
                'l': 37,
                'm': 38,
                'n': 39,
                'o': 40,
                'p': 41,
                'q': 42,
                'r': 43,
                's': 44,
                't': 45,
                'u': 46,
                'v': 47,
                'w': 48,
                'x': 49,
                'y': 50,
                'z': 51,
                '0': 52,
                '1': 53,
                '2': 54,
                '3': 55,
                '4': 56,
                '5': 57,
                '6': 58,
                '7': 59,
                '8': 60,
                '9': 61,
                '+': 62,
                '/': 63,
                '=': 64,
            },
            decode: function (n) {
                var r = n.replace(/[^A-Za-z0-9\+\/\=]/g, ''),
                    e = '';
                try {
                    e = window.atob(r);
                } catch (n) {
                    for (
                        var i, a, o, u, c, s, f = t.CHARS_TABLE, l = 0, g = r.length;
                        l < g;

                    )
                        (i = (f[r.charAt(l++)] << 2) | ((u = f[r.charAt(l++)]) >> 4)),
                            (a = ((15 & u) << 4) | ((c = f[r.charAt(l++)]) >> 2)),
                            (o = ((3 & c) << 6) | (s = f[r.charAt(l++)])),
                            (e += String.fromCharCode(i)),
                            64 !== c && (e += String.fromCharCode(a)),
                            64 !== s && (e += String.fromCharCode(o));
                }
                return (e = E.decode(e));
            },
            encode: function (n) {
                var r = E.encode(n),
                    e = '';
                try {
                    e = window.btoa(r);
                } catch (n) {
                    for (
                        var i, a, o, u, c, s, f, l = t.CHARS_LIST, g = 0, h = r.length;
                        g < h;

                    )
                        (u = (i = r.charCodeAt(g++)) >> 2),
                            (c = ((3 & i) << 4) | ((a = r.charCodeAt(g++)) >> 4)),
                            (s = ((15 & a) << 2) | ((o = r.charCodeAt(g++)) >> 6)),
                            (f = 63 & o),
                            isNaN(a) ? (s = f = 64) : isNaN(o) && (f = 64),
                            (e += l[u] + l[c] + l[s] + l[f]);
                }
                return e;
            },
        }),
        (r = {
            toHex: function (n, t) {
                return i.toHex(r.toRgb(n), t);
            },
            toRgb: function (n) {
                var t = n.c / 100,
                    r = n.m / 100,
                    e = n.y / 100,
                    i = n.k / 100,
                    a = 1 - i,
                    o = 1 - Math.min(1, t * a + i),
                    u = 1 - Math.min(1, r * a + i),
                    c = 1 - Math.min(1, e * a + i),
                    s = Math.round;
                return {
                    r: (o = s(255 * o)),
                    g: (u = s(255 * u)),
                    b: (c = s(255 * c)),
                    a: 1,
                };
            },
            toString: function (n) {
                return (
                    '{ c:' +
                    String(n.c) +
                    ', m:' +
                    String(n.m) +
                    ', y:' +
                    String(n.y) +
                    ', k:' +
                    String(n.k) +
                    ' }'
                );
            },
            toStringCSS: function (n) {
                return (
                    'cmyk(' +
                    String(n.c) +
                    '%, ' +
                    String(n.m) +
                    '%, ' +
                    String(n.y) +
                    '%, ' +
                    String(n.k) +
                    '%)'
                );
            },
        }),
        (e = {
            average: function (n) {
                return i.toHex(
                    i.average(
                        n.map(function (n) {
                            return e.toRgb(n);
                        })
                    )
                );
            },
            distance: function (n, t) {
                return i.distance(e.toRgb(n), e.toRgb(t));
            },
            gradient: function (n, t) {
                return i
                    .gradient(
                        n.map(function (n) {
                            return e.toRgb(n);
                        }),
                        t
                    )
                    .map(function (n) {
                        return i.toHex(n);
                    });
            },
            gradientMatrix: function (n, t, r) {
                return i
                    .gradientMatrix(
                        m.map(n, function (n) {
                            return e.toRgb(n);
                        }),
                        t,
                        r
                    )
                    .map(function (n) {
                        return n.map(function (n) {
                            return i.toHex(n);
                        });
                    });
            },
            interpolateBilinear: function (n, t, r, a, o, u) {
                return i.toHex(
                    i.interpolateBilinear(
                        e.toRgb(n),
                        e.toRgb(t),
                        e.toRgb(r),
                        e.toRgb(a),
                        o,
                        u
                    )
                );
            },
            interpolateLinear: function (n, t, r) {
                return i.toHex(i.interpolateLinear(e.toRgb(n), e.toRgb(t), r));
            },
            interpolateMultilinear: function (n, t) {
                return i.toHex(
                    i.interpolateMultilinear(
                        n.map(function (n) {
                            return e.toRgb(n);
                        }),
                        t
                    )
                );
            },
            nearest: function (n, t) {
                return i.toHex(
                    i.nearest(
                        e.toRgb(n),
                        t.map(function (n) {
                            return e.toRgb(n);
                        })
                    )
                );
            },
            toCmyk: function (n) {
                return i.toCmyk(e.toRgb(n));
            },
            toRgb: function (n) {
                var t,
                    r,
                    e,
                    i = l.decodeInt,
                    a = l.encodeInt;
                if (S.isNumber(n)) t = a(n);
                else {
                    if (!S.isString(n)) return null;
                    t = n.replace(/\#|0x/, '');
                }
                switch ((t = t.toUpperCase()).length) {
                    case 3:
                        r = {
                            a: 1,
                            r: i(
                                (e = /^([a-f\d]{1})([a-f\d]{1})([a-f\d]{1})$/i.exec(
                                    t
                                ))[1] + e[1]
                            ),
                            g: i(e[2] + e[2]),
                            b: i(e[3] + e[3]),
                        };
                        break;
                    case 6:
                        r = {
                            a: 1,
                            r: i(
                                (e = /^([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(
                                    t
                                ))[1]
                            ),
                            g: i(e[2]),
                            b: i(e[3]),
                        };
                        break;
                    case 8:
                        (e = /^([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(
                            t
                        )),
                            (r = {
                                a: d.roundDecimals(i(e[1]) / 255, 2),
                                r: i(e[2]),
                                g: i(e[3]),
                                b: i(e[4]),
                            });
                        break;
                    default:
                        return null;
                }
                return r;
            },
            toString: function (n, t) {
                return i.toHex(e.toRgb(n), t);
            },
            toStringCSS: function (n) {
                return e.toString(n, '#');
            },
        }),
        (i = {
            average: function (n) {
                for (var t, r = 0, e = 0, i = 0, a = 0, o = 0, u = n.length; o < u; o++)
                    (r += (t = n[o]).r),
                        (e += t.g),
                        (i += t.b),
                        (a += isNaN(t.a) ? 1 : t.a);
                var c = Math.round;
                return {
                    r: (r = c(r / u)),
                    g: (e = c(e / u)),
                    b: (i = c(i / u)),
                    a: (a = c(a / u)),
                };
            },
            distance: function (n, t) {
                var r = n.r - t.r,
                    e = n.g - t.g,
                    i = n.b - t.b,
                    a = Math.round(
                        255 * ((isNaN(n.a) ? 1 : n.a) - (isNaN(t.a) ? 1 : t.a))
                    );
                return Math.sqrt(r * r + e * e + i * i + a * a);
            },
            gradient: function (n, t) {
                for (
                    var r,
                        e = [],
                        a = i.interpolateMultilinear,
                        o = 1 / Math.max(1, t - 1),
                        u = d.constrain,
                        c = 0;
                    c < t;
                    c++
                )
                    (r = a(n, u(c * o, 0, 1))), e.push(r);
                return e;
            },
            gradientMatrix: function (n, t, r) {
                var e = n.topLeft,
                    a = n.top,
                    o = n.topRight,
                    u = n.right,
                    c = n.bottomLeft,
                    s = n.bottom,
                    f = n.bottomRight,
                    l = n.left,
                    h = n.center,
                    d = i.interpolateLinear,
                    p = i.interpolateBilinear;
                if (!(e && o && c && f)) return null;
                a || (a = d(e, o, 0.5)),
                    u || (u = d(f, o, 0.5)),
                    s || (s = d(c, f, 0.5)),
                    l || (l = d(e, c, 0.5)),
                    h || (h = p(a, s, l, u, 0.5, 0.5));
                var m,
                    v,
                    N,
                    y,
                    b,
                    S,
                    M = [
                        [
                            [e, l, h, a],
                            [a, h, u, o],
                        ],
                        [
                            [l, c, s, h],
                            [h, s, f, u],
                        ],
                    ],
                    E = [],
                    w = g.scalar;
                for (S = 0; S < r; S++)
                    for (E[S] = [], y = w(2, S / (r - 1) || 0), b = 0; b < t; b++)
                        (N = w(2, b / (t - 1) || 0)),
                            (e = (m = M[y.index][N.index])[0]),
                            (c = m[1]),
                            (f = m[2]),
                            (v = p(e, c, (o = m[3]), f, y.t, N.t)),
                            (E[S][b] = v);
                return E;
            },
            interpolateBilinear: function (n, t, r, e, a, o) {
                var u = i.interpolateLinear;
                return u(u(n, t, a), u(r, e, a), o);
            },
            interpolateLinear: function (n, t, r) {
                var e = g.linear,
                    i = Math.round;
                return {
                    r: i(e(n.r, t.r, r)),
                    g: i(e(n.g, t.g, r)),
                    b: i(e(n.b, t.b, r)),
                    a: i(e(isNaN(n.a) ? 1 : n.a, isNaN(t.a) ? 1 : t.a, r)),
                };
            },
            interpolateMultilinear: function (n, t) {
                var r = g.scalar(n.length - 1, t),
                    e = r.index;
                return i.interpolateLinear(n[e], n[e + 1], r.t);
            },
            nearest: function (n, t) {
                for (
                    var r,
                        e = i.distance,
                        a = e({ r: 0, g: 0, b: 0 }, { r: 255, g: 255, b: 255 }) + 1,
                        o = null,
                        u = 0,
                        c = t.length;
                    u < c;
                    u++
                )
                    (r = e(n, t[u])) < a && ((a = r), (o = t[u]));
                return o;
            },
            toCmyk: function (n) {
                var t = 1 - n.r / 255,
                    r = 1 - n.g / 255,
                    e = 1 - n.b / 255,
                    i = Math.min(t, r, e),
                    a = 1 - i,
                    o = i < 1 ? (t - i) / a : 0,
                    u = i < 1 ? (r - i) / a : 0,
                    c = i < 1 ? (e - i) / a : 0;
                (o *= 100), (u *= 100), (c *= 100), (i *= 100);
                var s = Math.round;
                return { c: (o = s(o)), m: (u = s(u)), y: (c = s(c)), k: (i = s(i)) };
            },
            toHex: function (n, t) {
                var r = isNaN(n.a) ? null : n.a,
                    e = isNaN(n.r) ? 0 : n.r,
                    i = isNaN(n.g) ? 0 : n.g,
                    a = isNaN(n.b) ? 0 : n.b,
                    o = l.encodeInt;
                return String(
                    (t || '#') +
                        (null === r || r >= 1 ? '' : o(255 * r)) +
                        o(e) +
                        o(i) +
                        o(a)
                );
            },
            toString: function (n) {
                return (
                    '{ r:' +
                    String(n.r) +
                    ', g:' +
                    String(n.g) +
                    ', b:' +
                    String(n.b) +
                    ', a:' +
                    String(isNaN(n.a) ? 1 : n.a) +
                    ' }'
                );
            },
            toStringCSS: function (n) {
                return (
                    'rgba(' +
                    String(n.r) +
                    ', ' +
                    String(n.g) +
                    ', ' +
                    String(n.b) +
                    ', ' +
                    String(isNaN(n.a) ? 1 : n.a) +
                    ')'
                );
            },
        }),
        (a = {
            cmyk: r,
            cmykToHex: r.toHex,
            cmykToRgb: r.toRgb,
            hex: e,
            hexToCmyk: e.toCmyk,
            hexToRgb: e.toRgb,
            rgb: i,
            rgbToCmyk: i.toCmyk,
            rgbToHex: i.toRgb,
        }),
        (o = {
            clone: function (n) {
                return new Date(n.getTime());
            },
            constrain: function (n, t, r) {
                var e = o.min(t, r),
                    i = o.max(t, r);
                return o.min(o.max(n, e), i);
            },
            format: function (n, t) {
                for (
                    var r,
                        e,
                        i = N.replace,
                        a = N.padZeros,
                        o = [
                            'Sunday',
                            'Monday',
                            'Tuesday',
                            'Wednesday',
                            'Thursday',
                            'Friday',
                            'Saturday',
                        ],
                        u = n.getDate(),
                        c = n.getFullYear(),
                        s = n.getMonth(),
                        f = s + 1,
                        l = [
                            'January',
                            'February',
                            'March',
                            'April',
                            'May',
                            'June',
                            'July',
                            'August',
                            'September',
                            'October',
                            'November',
                            'December',
                        ][s],
                        g = n.getDay(),
                        h = n.getHours(),
                        d = n.getMinutes(),
                        p = n.getSeconds(),
                        m = n.getMilliseconds(),
                        v = [
                            ['YYYY', c],
                            ['YY', a(c, 4).substring(2, 4)],
                            ['MM', a(f, 2)],
                            ['M', f],
                            ['DD', a(u, 2)],
                            ['D', u],
                            ['hh', a(h, 2)],
                            ['h', h],
                            ['mm', a(d, 2)],
                            ['m', d],
                            ['ss', a(p, 2)],
                            ['s', p],
                            ['ll', a(m, 2)],
                            ['XX', l],
                            ['X', l.substring(0, 3)],
                            ['ZZ', o[g]],
                            ['Z', o[g].substring(0, 3)],
                        ],
                        y = 0,
                        b = v.length;
                    y < b;
                    y++
                )
                    (e = (r = v[y])[0]), -1 !== t.indexOf(e) && (t = i(t, e, r[1]));
                return t;
            },
            identifier: function (n) {
                var t = n || new Date(),
                    r = t.getFullYear(),
                    e = t.getMonth() + 1,
                    i = t.getDate(),
                    a = t.getHours(),
                    o = t.getMinutes(),
                    u = t.getSeconds(),
                    c = t.getMilliseconds();
                return (
                    String(r) +
                    N.padZeros(e, 2) +
                    N.padZeros(i, 2) +
                    N.padZeros(a, 2) +
                    N.padZeros(o, 2) +
                    N.padZeros(u, 2) +
                    N.padZeros(c, 3)
                );
            },
            isFuture: function (n, t) {
                var r = new Date(n.getTime()),
                    e = new Date();
                return (
                    !0 !== t &&
                        (r.setHours(0),
                        r.setMinutes(0),
                        r.setSeconds(0),
                        r.setMilliseconds(0)),
                    e.getTime() - r.getTime() < 0
                );
            },
            isPast: function (n, t) {
                var r = new Date(n.getTime()),
                    e = new Date();
                return (
                    !0 !== t &&
                        (e.setHours(0),
                        e.setMinutes(0),
                        e.setSeconds(0),
                        e.setMilliseconds(0)),
                    e.getTime() - r.getTime() > 0
                );
            },
            max: function (n, t) {
                return n.getTime() > t.getTime() ? n : t;
            },
            min: function (n, t) {
                return n.getTime() <= t.getTime() ? n : t;
            },
            normalize: function (n) {
                return {
                    milliseconds: n % 1e3,
                    seconds: Math.floor(n / 1e3) % 60,
                    minutes: Math.floor(n / 1e3 / 60) % 60,
                    hours: Math.floor(n / 1e3 / 60 / 60) % 24,
                    days: Math.floor(n / 1e3 / 60 / 60 / 24),
                };
            },
            parse: function (n) {
                var t,
                    r = function (n) {
                        return (
                            S.isNumber(n) && n >= 0 && S.isNumber(new Date(n).getTime())
                        );
                    };
                if (S.isDate(n)) return n;
                if (S.isNumber(n)) {
                    if (r((t = n))) return new Date(t);
                } else if (S.isString(n)) {
                    if (r((t = Number(n)))) return new Date(t);
                    if (r((t = Date.parse(n)))) return new Date(t);
                }
                return null;
            },
            timestamp: function (n) {
                return (n || new Date()).getTime();
            },
            today: function () {
                var n = new Date();
                return (
                    n.setHours(0),
                    n.setMinutes(0),
                    n.setSeconds(0),
                    n.setMilliseconds(0),
                    n
                );
            },
            tomorrow: function () {
                var n = o.today();
                return n.setDate(n.getDate() + 1), n;
            },
            yesterday: function () {
                var n = o.today();
                return n.setDate(n.getDate() - 1), n;
            },
            yyyymmdd: function (n, t) {
                var r = n || new Date(),
                    e = r.getFullYear(),
                    i = r.getMonth() + 1,
                    a = r.getDate(),
                    o = t || '';
                return String(e) + o + N.padZeros(i, 2) + o + N.padZeros(a, 2);
            },
        }),
        (u = {
            backIn: function (n, t) {
                return n * n * (((t = isNaN(t) ? 1.70158 : t) + 1) * n - t);
            },
            backInOut: function (n, t) {
                return (
                    (t = isNaN(t) ? 1.70158 : t),
                    (n /= 0.5) < 1
                        ? n * n * (((t *= 1.525) + 1) * n - t) * 0.5
                        : 0.5 * ((n -= 2) * n * (((t *= 1.525) + 1) * n + t) + 2)
                );
            },
            backOut: function (n, t) {
                return (n -= 1) * n * (((t = isNaN(t) ? 1.70158 : t) + 1) * n + t) + 1;
            },
            bounceIn: function (n) {
                return (n = 1 - n) < 1 / 2.75
                    ? 1 - 7.5625 * n * n
                    : n < 2 / 2.75
                    ? 1 - (7.5625 * (n -= 1.5 / 2.75) * n + 0.75)
                    : n < 2.5 / 2.75
                    ? 1 - (7.5625 * (n -= 2.25 / 2.75) * n + 0.9375)
                    : 1 - (7.5625 * (n -= 2.625 / 2.75) * n + 0.984375);
            },
            bounceInOut: function (n) {
                return n < 0.5
                    ? (n = 1 - n) < 1 / 2.75
                        ? 1 - 7.5625 * n * n
                        : n < 2 / 2.75
                        ? 1 - (7.5625 * (n -= 1.5 / 2.75) * n + 0.75)
                        : n < 2.5 / 2.75
                        ? 1 - (7.5625 * (n -= 2.25 / 2.75) * n + 0.9375)
                        : 1 - (7.5625 * (n -= 2.625 / 2.75) * n + 0.984375)
                    : n < 1 / 2.75
                    ? 7.5625 * n * n
                    : n < 2 / 2.75
                    ? 7.5625 * (n -= 1.5 / 2.75) * n + 0.75
                    : n < 2.5 / 2.75
                    ? 7.5625 * (n -= 2.25 / 2.75) * n + 0.9375
                    : 7.5625 * (n -= 2.625 / 2.75) * n + 0.984375;
            },
            bounceOut: function (n) {
                return n < 1 / 2.75
                    ? 7.5625 * n * n
                    : n < 2 / 2.75
                    ? 7.5625 * (n -= 1.5 / 2.75) * n + 0.75
                    : n < 2.5 / 2.75
                    ? 7.5625 * (n -= 2.25 / 2.75) * n + 0.9375
                    : 7.5625 * (n -= 2.625 / 2.75) * n + 0.984375;
            },
            circularIn: function (n) {
                return -(Math.sqrt(1 - n * n) - 1);
            },
            circularInOut: function (n) {
                return (n /= 0.5) < 1
                    ? -0.5 * (Math.sqrt(1 - n * n) - 1)
                    : ((n -= 2), 0.5 * (Math.sqrt(1 - n * n) + 1));
            },
            circularOut: function (n) {
                return (n -= 1), Math.sqrt(1 - n * n);
            },
            cubicIn: function (n) {
                return n * n * n;
            },
            cubicInOut: function (n) {
                return (n /= 0.5) < 1 ? 0.5 * n * n * n : 0.5 * ((n -= 2) * n * n + 2);
            },
            cubicOut: function (n) {
                return (n -= 1) * n * n + 1;
            },
            elasticIn: function (n, t, r) {
                return 0 === n
                    ? 0
                    : 1 === n
                    ? 1
                    : ((t = isNaN(t) ? 0 : t),
                      (r = isNaN(r) ? 0.3 : r),
                      t < 1
                          ? ((t = 1), (e = r / 4))
                          : (e = (r / (2 * Math.PI)) * Math.asin(1 / t)),
                      (n -= 1),
                      -t *
                          Math.pow(2, 10 * n) *
                          Math.sin(((n - e) * (2 * Math.PI)) / r));
                var e;
            },
            elasticInOut: function (n, t, r) {
                return 0 === n
                    ? 0
                    : 2 === (n /= 0.5)
                    ? 1
                    : ((t = isNaN(t) ? 0 : t),
                      0.3 === (r = isNaN(r) ? 0.3 : r) && (r *= 1.5),
                      t < 1
                          ? ((t = 1), (e = r / 4))
                          : (e = (r / (2 * Math.PI)) * Math.asin(1 / t)),
                      n < 1
                          ? ((n -= 1),
                            t *
                                Math.pow(2, 10 * n) *
                                Math.sin(((n - e) * (2 * Math.PI)) / r) *
                                -0.5)
                          : ((n -= 1),
                            t *
                                Math.pow(2, -10 * n) *
                                Math.sin(((n - e) * (2 * Math.PI)) / r) *
                                0.5 +
                                1));
                var e;
            },
            elasticOut: function (n, t, r) {
                return 0 === n
                    ? 0
                    : 1 === n
                    ? 1
                    : ((t = isNaN(t) ? 0 : t),
                      (r = isNaN(r) ? 0.3 : r),
                      t < 1
                          ? ((t = 1), (e = r / 4))
                          : (e = (r / (2 * Math.PI)) * Math.asin(1 / t)),
                      t *
                          Math.pow(2, -10 * n) *
                          Math.sin(((n - e) * (2 * Math.PI)) / r) +
                          1);
                var e;
            },
            exponentialIn: function (n) {
                return 0 === n ? 0 : Math.pow(2, 10 * (n - 1));
            },
            exponentialInOut: function (n) {
                return 0 === n
                    ? 0
                    : 1 === n
                    ? 1
                    : (n /= 0.5) < 1
                    ? 0.5 * Math.pow(2, 10 * (n - 1))
                    : ((n -= 1), 0.5 * (2 - Math.pow(2, -10 * n)));
            },
            exponentialOut: function (n) {
                return 1 === n ? n : 1 - Math.pow(2, -10 * n);
            },
            none: function (n) {
                return n;
            },
            quadraticIn: function (n) {
                return n * n;
            },
            quadraticInOut: function (n) {
                return (n /= 0.5) < 1 ? 0.5 * n * n : -0.5 * ((n -= 1) * (n - 2) - 1);
            },
            quadraticOut: function (n) {
                return -n * (n - 2);
            },
            quarticIn: function (n) {
                return n * n * n * n;
            },
            quarticInOut: function (n) {
                return (n /= 0.5) < 1
                    ? 0.5 * n * n * n * n
                    : -0.5 * ((n -= 2) * n * n * n - 2);
            },
            quarticOut: function (n) {
                return -((n -= 1) * n * n * n - 1);
            },
            quinticIn: function (n) {
                return n * n * n * n * n;
            },
            quinticInOut: function (n) {
                return (n /= 0.5) < 1
                    ? 0.5 * n * n * n * n * n
                    : 0.5 * ((n -= 2) * n * n * n * n + 2);
            },
            quinticOut: function (n) {
                return (n -= 1) * n * n * n * n + 1;
            },
            sexticIn: function (n) {
                return n * n * n * n * n * n;
            },
            sexticInOut: function (n) {
                return (n /= 0.5) < 1
                    ? 0.5 * n * n * n * n * n * n
                    : -0.5 * ((n -= 2) * n * n * n * n * n - 2);
            },
            sexticOut: function (n) {
                return -((n -= 1) * n * n * n * n * n - 1);
            },
            sineIn: function (n) {
                return 1 - Math.cos(n * (Math.PI / 2));
            },
            sineInOut: function (n) {
                return -0.5 * (Math.cos(Math.PI * n) - 1);
            },
            sineOut: function (n) {
                return Math.sin(n * (Math.PI / 2));
            },
            waveCosine: function (n, t, r, e) {
                (t = isNaN(t) ? 1 : t), (r = !0 === r), (e = !0 === e);
                var i = Math.cos(Math.PI * n * t);
                return (i = r ? Math.abs(i) : i), (i = e ? 1 - i : i);
            },
            waveSawtooth: function (n, t, r, e) {
                e = !0 === e;
                var i = (n * (t = isNaN(t) ? 1 : t)) % 1;
                return (i = (r = !0 === r) ? Math.abs(i) : i), (i = e ? 1 - i : i);
            },
            waveSine: function (n, t, r, e) {
                (t = isNaN(t) ? 1 : t), (r = !0 === r), (e = !0 === e);
                var i = Math.sin(Math.PI * n * t);
                return (i = r ? Math.abs(i) : i), (i = e ? 1 - i : i);
            },
        }),
        (c = {
            args: function (n, t) {
                return [].slice.call(n, t || 0);
            },
            attempt: function (n, t) {
                try {
                    var r = c.args(arguments);
                    return c.call.apply(null, r);
                } catch (n) {
                    return n;
                }
            },
            bind: function (n, t) {
                var r = c.args(arguments);
                return function () {
                    var n = c.args(arguments);
                    return c.call.apply(null, r.concat(n));
                };
            },
            call: function (n, t) {
                S.isString(n) && (n = t[n]);
                var r = c.args(arguments, 2);
                return n.apply(t, r);
            },
            debounce: function (n, t, r) {
                var e;
                return function () {
                    e && (clearTimeout(e), (e = null));
                    var i = arguments;
                    e = setTimeout(function () {
                        t.apply(r, i);
                    }, n);
                };
            },
            delay: function (n, t, r) {
                var e = c.args(arguments, 1),
                    i = c.bind.apply(null, e),
                    a = setTimeout(i, n);
                return {
                    cancel: function () {
                        clearTimeout(a);
                    },
                    func: i,
                    id: a,
                };
            },
            memoize: function (n, t) {
                var r = {};
                return function () {
                    var e = c.args(arguments),
                        i = String(e);
                    return (
                        i in r || (r[i] = c.call.apply(null, [n, t].concat(e))), r[i]
                    );
                };
            },
            noop: function () {
                return !0;
            },
            repeat: function (n, t, r) {
                var e = c.args(arguments, 1),
                    i = c.bind.apply(null, e),
                    a = setInterval(i, n);
                return {
                    cancel: function () {
                        clearInterval(a);
                    },
                    func: i,
                    id: a,
                };
            },
            throttle: function (n, t, r) {
                var e;
                return function () {
                    e ||
                        (t.apply(r, arguments),
                        (e = setTimeout(function () {
                            clearTimeout(e), (e = null);
                        }, n)));
                };
            },
            until: function (n, t, r) {
                var e = c.args(arguments, 1),
                    i = c.bind.apply(null, e),
                    a = c.repeat(n, function () {
                        !1 === i() && a.cancel();
                    });
                return a;
            },
            validate: function (n) {
                var t,
                    r,
                    e,
                    i,
                    a = c.args(n),
                    o = c.args(arguments, 1);
                for (t = 0, r = o.length; t < r; t++)
                    S.isArray(o[t]) || (o[t] = [o[t]]);
                for (
                    var u, s, f, l = o.length;
                    l > 0 && -1 !== o[l - 1].indexOf('undefined');

                )
                    l--;
                if (a.length < l)
                    throw new TypeError(
                        'invalid arguments count: received ' +
                            a.length +
                            ', expected ' +
                            l +
                            ' arguments.'
                    );
                for (t = 0, r = o.length; t < r; t++)
                    for (e = 0, i = o[t].length; e < i; e++)
                        if (!S.isType(o[t][e]))
                            throw new TypeError(
                                'invalid argument: expected type "' +
                                    String(o[t][e]) +
                                    '" is not a valid type.'
                            );
                for (t = 0, r = a.length; t < r; t++)
                    if (
                        ((u = a[t]),
                        (s = S.of(u)),
                        -1 === (f = o[Math.min(t, o.length - 1)]).indexOf(s))
                    )
                        throw new TypeError(
                            'invalid argument: type of argument[' +
                                t +
                                '] is "' +
                                s +
                                '", expected "' +
                                f.join('" or "') +
                                '".'
                        );
            },
        }),
        (f = {
            point: (s = {
                add: function (n, t) {
                    return { x: n.x + t.x, y: n.y + t.y };
                },
                angle: function (n, t) {
                    var r = b.angleDeg(t.y - n.y, t.x - n.x);
                    return b.cycleDeg(r);
                },
                cross: function (n, t) {
                    return n.x * t.y - n.y * t.x;
                },
                distance: function (n, t) {
                    var r = t.x - n.x,
                        e = t.y - n.y;
                    return Math.sqrt(r * r + e * e);
                },
                dot: function (n, t) {
                    return n.x * t.x + n.y * t.y;
                },
                equals: function (n, t, r) {
                    var e = d.equals;
                    return e(n.x, t.x, r) && e(n.y, t.y, r);
                },
                interpolate: function (n, t, r) {
                    var e = g.linear;
                    return { x: e(n.x, t.x, r), y: e(n.y, t.y, r) };
                },
                length: function (n) {
                    return s.distance(n, { x: 0, y: 0 });
                },
                magnitude: function (n) {
                    return s.length(n);
                },
                project: function (n, t, r) {
                    return { x: n.x + t * b.cosDeg(r), y: n.y + t * b.sinDeg(r) };
                },
                rect: function (n) {
                    for (var t, r = [], e = [], i = 0, a = n.length; i < a; i++)
                        (t = n[i]), r.push(t.x), e.push(t.y);
                    var o = Math.min,
                        u = o.apply(null, r),
                        c = o.apply(null, e),
                        s = Math.max,
                        f = s.apply(null, r),
                        l = s.apply(null, e);
                    return {
                        topLeft: { x: u, y: c },
                        topRight: { x: f, y: c },
                        bottomRight: { x: f, y: l },
                        bottomLeft: { x: u, y: l },
                    };
                },
                rotate: function (n, t, r) {
                    var e = r || { x: 0, y: 0 },
                        i = s.subtract(n, e),
                        a = b.cosDeg(t),
                        o = b.sinDeg(t),
                        u = { x: i.x * a - i.y * o, y: i.x * o + i.y * a };
                    return s.add(u, e);
                },
                scale: function (n, t) {
                    return { x: n.x * t, y: n.y * t };
                },
                subtract: function (n, t) {
                    return { x: n.x - t.x, y: n.y - t.y };
                },
                translate: function (n, t, r) {
                    return { x: n.x + t, y: n.y + r };
                },
            }),
        }),
        (l = {
            decodeInt: function (n) {
                return parseInt(n, 16);
            },
            encodeInt: function (n) {
                var t = Math.round(n).toString(16).toUpperCase();
                return 1 === t.length ? '0' + t : t;
            },
        }),
        (g = {
            bilinear: function (n, t, r, e, i, a) {
                var o = g.linear;
                return o(o(n, t, i), o(r, e, i), a);
            },
            linear: function (n, t, r) {
                return n * (1 - r) + t * r;
            },
            multilinear: function (n, t) {
                var r = g.scalar(n.length - 1, t),
                    e = r.index;
                return g.linear(n[e], n[e + 1], r.t);
            },
            scalar: function (n, t) {
                var r = t * n,
                    e = Math.floor(r),
                    i = n - 1,
                    a = d.constrain(e, 0, i);
                return { index: a, t: r - a };
            },
        }),
        (h = {
            decode: function (n) {
                var t = '';
                try {
                    t = JSON.parse(n);
                } catch (r) {
                    (n = n.replace(/&quot;/g, '"')), (t = JSON.parse(n));
                }
                return t;
            },
            encode: function (n) {
                return JSON.stringify(n);
            },
        }),
        (d = {
            average: function (n) {
                return d.summation(n) / n.length;
            },
            constrain: function (n, t, r) {
                return Math.min(Math.max(n, Math.min(t, r)), Math.max(t, r));
            },
            cycle: function (n, t, r) {
                return S.isNumber(r) || (r = 0), ((((n - r) % t) + t) % t) + r;
            },
            equals: function (n, t, r) {
                return (
                    S.isNumber(r) ? r > 0 && (r += 1e-10) : (r = 1e-10),
                    Math.abs(n - t) <= r
                );
            },
            euclideanDistance: function (n, t) {
                return Math.sqrt(
                    d.summation(
                        n.map(function (n, r) {
                            return Math.pow(Math.abs(n - t[r]), 2);
                        })
                    )
                );
            },
            factorial: function (n) {
                for (var t = 1, r = t; r <= n; r++) t *= r;
                return t;
            },
            gcd: function (n, t) {
                return n === t
                    ? n
                    : (n < t && ((n ^= t), (n ^= t ^= n)), d.gcd(n - t, t));
            },
            interpolation: g,
            lcm: function (n, t) {
                return (n * t) / d.gcd(n, t);
            },
            lerp: function (n, t, r) {
                return g.linear(n, t, r);
            },
            map: function (n, t, r, e, i) {
                return g.linear(e, i, d.normalize(n, t, r));
            },
            nearest: function (n, t, r) {
                return Math.abs(n - t) <= Math.abs(n - r) ? t : r;
            },
            normalize: function (n, t, r) {
                return (n - t) / (r - t);
            },
            proportion: function (t, r, e, i) {
                var a = c.args(arguments);
                return 3 !== n.clean(a).length
                    ? NaN
                    : S.isNumber(t)
                    ? S.isNumber(r)
                        ? S.isNumber(e)
                            ? S.isNumber(i)
                                ? NaN
                                : (e * r) / t
                            : (i * t) / r
                        : (t * i) / e
                    : (r * e) / i;
            },
            roundDecimals: function (n, t) {
                return Number(n.toFixed(t || 2));
            },
            roundToMultiple: function (n, t) {
                return Math.round(n / t) * t;
            },
            roundToNearest: function (t, r) {
                var e = n.sort(r.concat()),
                    i = 0,
                    a = 0,
                    o = e.length;
                if (0 === o) return NaN;
                if (o > 2)
                    for (; a < o; )
                        if (t < e[(i = Math.floor((a + o) / 2))]) o = i;
                        else {
                            if (!(t > e[i + 1])) break;
                            a = i + 1;
                        }
                return (a = i + 1 in e ? i + 1 : i), d.nearest(t, e[i], e[a]);
            },
            roundToPower: function (n, t) {
                return Math.pow(t, Math.round(Math.log(n) / Math.log(t)));
            },
            sign: function (n) {
                return n >= 0 ? 1 : -1;
            },
            summation: function (n) {
                for (var t = 0, r = 0, e = n.length; r < e; r++) t += n[r];
                return t;
            },
        }),
        (p = {
            isBetween: function (n, t, r) {
                return n >= t && n <= r;
            },
            isEven: function (n) {
                return n % 2 == 0 && !p.isFloat(n);
            },
            isFloat: function (n) {
                return n % 1 != 0;
            },
            isNegative: function (n) {
                return n < 0;
            },
            isOdd: function (n) {
                return n % 2 != 0 && !p.isFloat(n);
            },
            isPositive: function (n) {
                return n >= 0;
            },
            isPrime: function (n) {
                if (n <= 0 || p.isFloat(n)) return !1;
                if (1 === n) return !1;
                if (2 === n) return !0;
                if (n % 2 == 0) return !1;
                for (var t = 3; t * t <= n; t += 2) if (n % t == 0) return !1;
                return !0;
            },
        }),
        (m = {
            assign: function (n, t) {
                var r,
                    e,
                    i,
                    a = [t].concat(c.args(arguments, 2));
                for (r = 0, e = a.length; r < e; r++) for (i in a[r]) n[i] = a[r][i];
                return n;
            },
            clean: function (t, r) {
                for (var e, i, a = m.keys(t), o = 0, u = a.length; o < u; o++) {
                    if (((i = t[(e = a[o])]), !0 === r))
                        switch (S.of(i)) {
                            case S.ARRAY:
                                0 === (i = t[e] = n.clean(i, r)).length && (i = null);
                                break;
                            case S.OBJECT:
                                (i = t[e] = m.clean(i, r)),
                                    0 === m.length(i) && (i = null);
                                break;
                            case S.STRING:
                                '' === (i = t[e] = N.trim(i)) && (i = null);
                        }
                    S.isNone(i) && delete t[e];
                }
                return t;
            },
            clone: function (t) {
                for (var r, e, i = {}, a = m.keys(t), u = 0, c = a.length; u < c; u++)
                    switch (((e = t[(r = a[u])]), S.of(e))) {
                        case S.ARRAY:
                            i[r] = n.clone(e);
                            break;
                        case S.DATE:
                            i[r] = o.clone(e);
                            break;
                        case S.OBJECT:
                            i[r] = m.clone(e);
                            break;
                        default:
                            i[r] = t[r];
                    }
                return i;
            },
            decodeBase64: function (n) {
                return h.decode(t.decode(n));
            },
            decodeJSON: function (n) {
                return h.decode(n);
            },
            decodeParameters: function (n) {
                return M.getParametersDict('?' + n);
            },
            encodeBase64: function (n) {
                return t.encode(h.encode(n));
            },
            encodeJSON: function (n) {
                return h.encode(n);
            },
            encodeParameters: function (n, t) {
                for (
                    var r,
                        e,
                        i = m.clean(m.clone(n), !0),
                        a = S.isArray(t) ? t : m.keys(n, !0),
                        o = [],
                        u = 0,
                        c = a.length;
                    u < c;
                    u++
                )
                    (r = a[u]) in i &&
                        ((e = i[r]), o.push(r + '=' + encodeURIComponent(e)));
                return o.join('&');
            },
            equals: function (n, t) {
                if (n === t || m.is(n, t)) return !0;
                var r, e, i, a;
                if ((a = S.of(n)) !== S.of(t)) return !1;
                switch (a) {
                    case S.ARRAY:
                    case S.OBJECT:
                        break;
                    case S.NUMBER:
                        return d.equals(n, t);
                    default:
                        return String(n) === String(t);
                }
                for (r in t) if (!(r in n)) return !1;
                for (r in n)
                    if (
                        ((e = n[r]),
                        (i = t[r]),
                        !(
                            m.is(n, e) ||
                            m.is(t, i) ||
                            m.is(e, i) ||
                            e === i ||
                            m.equals(e, i)
                        ))
                    )
                        return !1;
                return !0;
            },
            is: function (n, t) {
                return (
                    Object.is ||
                        (Object.is = function (n, t) {
                            return n === t
                                ? 0 !== n || 1 / n == 1 / t
                                : n != n && t != t;
                        }),
                    Object.is(n, t)
                );
            },
            keypath: {
                get: function (n, t, r) {
                    for (
                        var e, i = t.split('.'), a = n, o = 0, u = i.length;
                        o < u;
                        o++
                    ) {
                        e = i[o];
                        try {
                            a = a[e];
                        } catch (n) {
                            return r;
                        }
                    }
                    return S.isUndefined(a) ? r : a;
                },
                set: function (n, t, r) {
                    for (
                        var e, i = t.split('.'), a = n, o = 0, u = i.length;
                        o < u && '__proto__' !== (e = i[o]) && 'constructor' !== e;
                        o++
                    )
                        S.isObject(a[e]) || (a[e] = {}),
                            o < u - 1 ? (a = a[e]) : (a[e] = r);
                },
            },
            keys: function (n, t) {
                var r = Object.keys(n);
                return !0 === t && r.sort(), r;
            },
            length: function (n) {
                return m.keys(n).length;
            },
            map: function (n, t) {
                var r = {};
                return (
                    m.keys(n).forEach(function (e) {
                        r[e] = t.call(null, n[e], e, n);
                    }),
                    r
                );
            },
            merge: function (n, t) {
                var r = [{}, n, t].concat(c.args(arguments, 2));
                return m.assign.apply(null, r);
            },
            search: function (n, t) {
                var r,
                    e,
                    i,
                    a,
                    o,
                    u,
                    c,
                    s,
                    f,
                    l = [];
                for (r = 0, e = n.length; r < e; r++) {
                    for (u = o = n[r], i = 0, a = (c = m.keys(t)).length; i < a; i++)
                        (f = t[(s = c[i])]), m.equals(o[s], f) || (u = null);
                    u && l.push(u);
                }
                return l;
            },
            values: function (n, t) {
                for (var r = m.keys(n, t), e = [], i = 0, a = r.length; i < a; i++)
                    e.push(n[r[i]]);
                return e;
            },
        }),
        (v = {
            argument: function () {
                var n = c.args(arguments);
                return v.element(n);
            },
            bit: function (n) {
                return v.boolean(n) ? 1 : 0;
            },
            boolean: function (n) {
                return Boolean(Math.random() < (isNaN(n) ? 0.5 : n));
            },
            color: function () {
                return v.integer(0, 16777215);
            },
            element: function (n) {
                return n[v.index(n)];
            },
            float: function (n, t) {
                return n + Math.random() * (t - n);
            },
            index: function (n) {
                return v.integer(0, n.length - 1);
            },
            integer: function (n, t) {
                return Math.floor(Math.round(v.float(n - 0.5, t + 0.5)));
            },
            map: function (n, t) {
                for (var r = [], e = 0; e < t; e++) r.push(n(e));
                return r;
            },
            sign: function (n) {
                return v.boolean(n) ? 1 : -1;
            },
            string: function (n, t) {
                for (
                    var r = (t =
                            t ||
                            'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!?@#$%^&*(-_=+).,;').split(
                            ''
                        ),
                        e = v.element,
                        i = 0,
                        a = '';
                    i < n;

                )
                    (a += e(r)), i++;
                return a;
            },
        }),
        (N = {
            contains: function (n, t) {
                return Boolean(n.indexOf(t) > -1);
            },
            endsWith: function (n, t) {
                return n.substring(n.length - t.length, n.length) === t;
            },
            icontains: function (n, t) {
                return N.contains(n.toLowerCase(), t.toLowerCase());
            },
            levenshteinDistance: function (n, t) {
                for (var r = [], e = 0; e <= t.length; e++)
                    if (((r[e] = [e]), 0 !== e))
                        for (var i = 0; i <= n.length; i++)
                            (r[0][i] = i),
                                0 !== i &&
                                    (r[e][i] =
                                        t.charAt(e - 1) === n.charAt(i - 1)
                                            ? r[e - 1][i - 1]
                                            : Math.min(
                                                  r[e - 1][i - 1] + 1,
                                                  r[e][i - 1] + 1,
                                                  r[e - 1][i] + 1
                                              ));
                return r[t.length][n.length];
            },
            levenshteinSimilarity: function (n, t) {
                var r = N.levenshteinDistance(n, t),
                    e = Math.max(n.length, t.length);
                return 0 === e ? 1 : 1 - r / e;
            },
            padLeft: function (n, t, r) {
                for (var e = n.length; e < t; ) (n = r + n), e++;
                return n;
            },
            padRight: function (n, t, r) {
                for (var e = n.length; e < t; ) (n += r), e++;
                return n;
            },
            padZeros: function (n, t) {
                return N.padLeft(String(n), t, '0');
            },
            render: function (n, t, r, e) {
                var i,
                    a,
                    o = new RegExp(
                        (r || '{{') +
                            '[\\s]*([a-zA-Z0-9\\-\\_]+){1}[\\s]*' +
                            (e || '}}'),
                        'g'
                    ),
                    u = Array.from(n.matchAll(o));
                return (
                    (t = t || {}),
                    u.forEach(function (r) {
                        (i = r[0]),
                            (a = t[r[1]]),
                            S.isNone(a) && (a = ''),
                            (n = N.replace(n, i, a));
                    }),
                    n
                );
            },
            replace: function (n, t, r, e) {
                var i = t.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'),
                    a = new RegExp(i, !1 === e ? 'gi' : 'g');
                return n.replace(a, String(r));
            },
            reverse: function (n) {
                var t = n.split('');
                return t.reverse(), t.join('');
            },
            rotate: function (t, r) {
                var e = t.split('');
                return (e = n.rotate(e, r)).join('');
            },
            slugify: function (n) {
                for (
                    var t = {
                            À: 'A',
                            Á: 'A',
                            Â: 'A',
                            Ã: 'A',
                            Ä: 'A',
                            Å: 'A',
                            Æ: 'AE',
                            Ç: 'C',
                            È: 'E',
                            É: 'E',
                            Ê: 'E',
                            Ë: 'E',
                            Ì: 'I',
                            Í: 'I',
                            Î: 'I',
                            Ï: 'I',
                            Ð: 'D',
                            Ñ: 'N',
                            Ò: 'O',
                            Ó: 'O',
                            Ô: 'O',
                            Õ: 'O',
                            Ö: 'O',
                            Ő: 'O',
                            Ø: 'O',
                            Ù: 'U',
                            Ú: 'U',
                            Û: 'U',
                            Ü: 'U',
                            Ű: 'U',
                            Ý: 'Y',
                            Þ: 'TH',
                            ß: 'ss',
                            à: 'a',
                            á: 'a',
                            â: 'a',
                            ã: 'a',
                            ä: 'a',
                            å: 'a',
                            æ: 'ae',
                            ç: 'c',
                            è: 'e',
                            é: 'e',
                            ê: 'e',
                            ë: 'e',
                            ì: 'i',
                            í: 'i',
                            î: 'i',
                            ï: 'i',
                            ð: 'd',
                            ñ: 'n',
                            ò: 'o',
                            ó: 'o',
                            ô: 'o',
                            õ: 'o',
                            ö: 'o',
                            ő: 'o',
                            ø: 'o',
                            ù: 'u',
                            ú: 'u',
                            û: 'u',
                            ü: 'u',
                            ű: 'u',
                            ý: 'y',
                            þ: 'th',
                            ÿ: 'y',
                            ẞ: 'SS',
                            œ: 'oe',
                            Œ: 'OE',
                            α: 'a',
                            β: 'b',
                            γ: 'g',
                            δ: 'd',
                            ε: 'e',
                            ζ: 'z',
                            η: 'h',
                            θ: '8',
                            ι: 'i',
                            κ: 'k',
                            λ: 'l',
                            μ: 'm',
                            ν: 'n',
                            ξ: '3',
                            ο: 'o',
                            π: 'p',
                            ρ: 'r',
                            σ: 's',
                            τ: 't',
                            υ: 'y',
                            φ: 'f',
                            χ: 'x',
                            ψ: 'ps',
                            ω: 'w',
                            ά: 'a',
                            έ: 'e',
                            ί: 'i',
                            ό: 'o',
                            ύ: 'y',
                            ή: 'h',
                            ώ: 'w',
                            ς: 's',
                            ϊ: 'i',
                            ΰ: 'y',
                            ϋ: 'y',
                            ΐ: 'i',
                            Α: 'A',
                            Β: 'B',
                            Γ: 'G',
                            Δ: 'D',
                            Ε: 'E',
                            Ζ: 'Z',
                            Η: 'H',
                            Θ: '8',
                            Ι: 'I',
                            Κ: 'K',
                            Λ: 'L',
                            Μ: 'M',
                            Ν: 'N',
                            Ξ: '3',
                            Ο: 'O',
                            Π: 'P',
                            Ρ: 'R',
                            Σ: 'S',
                            Τ: 'T',
                            Υ: 'Y',
                            Φ: 'F',
                            Χ: 'X',
                            Ψ: 'PS',
                            Ω: 'W',
                            Ά: 'A',
                            Έ: 'E',
                            Ί: 'I',
                            Ό: 'O',
                            Ύ: 'Y',
                            Ή: 'H',
                            Ώ: 'W',
                            Ϊ: 'I',
                            Ϋ: 'Y',
                            ş: 's',
                            Ş: 'S',
                            ı: 'i',
                            İ: 'I',
                            ğ: 'g',
                            Ğ: 'G',
                            а: 'a',
                            б: 'b',
                            в: 'v',
                            г: 'g',
                            д: 'd',
                            е: 'e',
                            ё: 'yo',
                            ж: 'zh',
                            з: 'z',
                            и: 'i',
                            й: 'j',
                            к: 'k',
                            л: 'l',
                            м: 'm',
                            н: 'n',
                            о: 'o',
                            п: 'p',
                            р: 'r',
                            с: 's',
                            т: 't',
                            у: 'u',
                            ф: 'f',
                            х: 'h',
                            ц: 'c',
                            ч: 'ch',
                            ш: 'sh',
                            щ: 'sh',
                            ъ: 'u',
                            ы: 'y',
                            э: 'e',
                            ю: 'yu',
                            я: 'ya',
                            А: 'A',
                            Б: 'B',
                            В: 'V',
                            Г: 'G',
                            Д: 'D',
                            Е: 'E',
                            Ё: 'Yo',
                            Ж: 'Zh',
                            З: 'Z',
                            И: 'I',
                            Й: 'J',
                            К: 'K',
                            Л: 'L',
                            М: 'M',
                            Н: 'N',
                            О: 'O',
                            П: 'P',
                            Р: 'R',
                            С: 'S',
                            Т: 'T',
                            У: 'U',
                            Ф: 'F',
                            Х: 'H',
                            Ц: 'C',
                            Ч: 'Ch',
                            Ш: 'Sh',
                            Щ: 'Sh',
                            Ъ: 'U',
                            Ы: 'Y',
                            Э: 'E',
                            Ю: 'Yu',
                            Я: 'Ya',
                            Є: 'Ye',
                            І: 'I',
                            Ї: 'Yi',
                            Ґ: 'G',
                            є: 'ye',
                            і: 'i',
                            ї: 'yi',
                            ґ: 'g',
                            č: 'c',
                            ď: 'd',
                            ě: 'e',
                            ň: 'n',
                            ř: 'r',
                            š: 's',
                            ť: 't',
                            ů: 'u',
                            ž: 'z',
                            Č: 'C',
                            Ď: 'D',
                            Ě: 'E',
                            Ň: 'N',
                            Ř: 'R',
                            Š: 'S',
                            Ť: 'T',
                            Ů: 'U',
                            Ž: 'Z',
                            ą: 'a',
                            ć: 'c',
                            ę: 'e',
                            ł: 'l',
                            ń: 'n',
                            ś: 's',
                            ź: 'z',
                            ż: 'z',
                            Ą: 'A',
                            Ć: 'C',
                            Ę: 'e',
                            Ł: 'L',
                            Ń: 'N',
                            Ś: 'S',
                            Ź: 'Z',
                            Ż: 'Z',
                            ā: 'a',
                            ē: 'e',
                            ģ: 'g',
                            ī: 'i',
                            ķ: 'k',
                            ļ: 'l',
                            ņ: 'n',
                            ū: 'u',
                            Ā: 'A',
                            Ē: 'E',
                            Ģ: 'G',
                            Ī: 'i',
                            Ķ: 'k',
                            Ļ: 'L',
                            Ņ: 'N',
                            Ū: 'u',
                        },
                        r = 0,
                        e = n.length;
                    r < e;
                    r++
                )
                    t[n.charAt(r)] && (n = n.replace(n.charAt(r), t[n.charAt(r)]));
                return (n = (n = (n = (n = n.toLowerCase()).replace(
                    /[^a-z0-9]/gm,
                    '-'
                )).replace(/[\-]+/gm, '-')).replace(/^[\-]|[\-]$/gm, ''));
            },
            startsWith: function (n, t) {
                return n.substr(0, t.length) === t;
            },
            toConstantCase: function (n) {
                return n.replace(/[\s]/gm, '_').toUpperCase();
            },
            toRandomCase: function (n) {
                return n.replace(/./gm, function (n) {
                    return v.boolean() ? n.toUpperCase() : n.toLowerCase();
                });
            },
            toTitleCase: function (n, t) {
                return n.replace(/[^\'\‘\’\`\-\s]+/gm, function (n) {
                    return N.toUpperCaseFirst(n, t);
                });
            },
            toUpperCaseFirst: function (n, t) {
                if (0 === n.length) return n;
                var r = n.substr(0, 1).toUpperCase(),
                    e = n.length > 1 ? n.substr(1) : '';
                return r + (!0 === t ? e.toLowerCase() : e);
            },
            trim: function (n) {
                return n.trim();
            },
            trimLeft: function (n) {
                return n.trimStart();
            },
            trimRight: function (n) {
                return n.trimEnd();
            },
        }),
        (y = {
            assertArray: function (n, t) {
                if (!S.isArray(n))
                    throw new Error('value is not array: ' + String(n) + '.');
                S.isNumber(t) && y.assertEqual(n.length, t);
            },
            assertBase64: function (n) {
                if (!S.isBase64(n))
                    throw new Error('value is not base64: ' + String(n) + '.');
            },
            assertBoolean: function (n) {
                if (!S.isBoolean(n))
                    throw new Error('value is not boolean: ' + String(n) + '.');
            },
            assertDate: function (n) {
                if (!S.isDate(n))
                    throw new Error('value is not date: ' + String(n) + '.');
            },
            assertEqual: function (n, t) {
                if (!m.equals(n, t)) {
                    var r =
                            S.isArray(n) || S.isObject(n)
                                ? '\n' + h.encode(n) + '\n'
                                : String(n),
                        e =
                            S.isArray(t) || S.isObject(t)
                                ? '\n' + h.encode(t)
                                : String(t);
                    throw (
                        ((r = S.isString(n) ? String('"' + r + '"') : r),
                        (e = S.isString(t) ? String('"' + e + '"') : e),
                        new Error('values are not equal: ' + r + ' != ' + e))
                    );
                }
            },
            assertError: function (n) {
                if (!S.isError(n))
                    throw new Error('value is not error: ' + String(n) + '.');
            },
            assertFalse: function (n) {
                if ((y.assertBoolean(n), !1 !== n))
                    throw new Error('value is not false: ' + String(n) + '.');
            },
            assertFunction: function (n) {
                if (!S.isFunction(n))
                    throw new Error('value is not function: ' + String(n) + '.');
            },
            assertJSON: function (n) {
                if (!S.isJSON(n))
                    throw new Error('value is not json: ' + String(n) + '.');
            },
            assertNaN: function (n) {
                if (!S.isNaN(n))
                    throw new Error('value is not NaN: ' + String(n) + '.');
            },
            assertNone: function (n) {
                if (!S.isNone(n))
                    throw new Error('value is not none: ' + String(n) + '.');
            },
            assertNotArray: function (n) {
                if (S.isArray(n)) throw new Error('value is array: ' + String(n) + '.');
            },
            assertNotBase64: function (n) {
                if (S.isBase64(n))
                    throw new Error('value is base64: ' + String(n) + '.');
            },
            assertNotBoolean: function (n) {
                if (S.isBoolean(n))
                    throw new Error('value is boolean: ' + String(n) + '.');
            },
            assertNotDate: function (n) {
                if (S.isDate(n)) throw new Error('value is date: ' + String(n) + '.');
            },
            assertNotEqual: function (n, t) {
                if (m.equals(n, t)) {
                    var r =
                            S.isArray(n) || S.isObject(n)
                                ? '\n' + h.encode(n) + '\n'
                                : String(n),
                        e =
                            S.isArray(t) || S.isObject(t)
                                ? '\n' + h.encode(t)
                                : String(t);
                    throw new Error('values are equal: ' + r + ' == ' + e);
                }
            },
            assertNotError: function (n) {
                if (S.isError(n)) throw new Error('value is error: ' + String(n) + '.');
            },
            assertNotFunction: function (n) {
                if (S.isFunction(n))
                    throw new Error('value is function: ' + String(n) + '.');
            },
            assertNotJSON: function (n) {
                if (S.isJSON(n)) throw new Error('value is json: ' + String(n) + '.');
            },
            assertNotNone: function (n) {
                if (S.isNone(n)) throw new Error('value is none: ' + String(n) + '.');
            },
            assertNotNumber: function (n) {
                if (S.isNumber(n))
                    throw new Error('value is number: ' + String(n) + '.');
            },
            assertNotNull: function (n) {
                if (S.isNull(n)) throw new Error('value is null: ' + String(n) + '.');
            },
            assertNotObject: function (n) {
                if (S.isObject(n))
                    throw new Error('value is object: ' + String(n) + '.');
            },
            assertNotRegExp: function (n) {
                if (S.isRegExp(n))
                    throw new Error('value is regexp: ' + String(n) + '.');
            },
            assertNotString: function (n) {
                if (S.isString(n))
                    throw new Error('value is string: ' + String(n) + '.');
            },
            assertNotUndefined: function (n) {
                if (S.isUndefined(n))
                    throw new Error('value is undefined: ' + String(n) + '.');
            },
            assertNumber: function (n) {
                if (!S.isNumber(n))
                    throw new Error('value is not number: ' + String(n) + '.');
            },
            assertNumberAlmostEqual: function (n, t, r) {
                if ((y.assertNumber(n), y.assertNumber(t), !d.equals(n, t, r)))
                    throw new Error(
                        'values are not almost equals (tolerance = ' +
                            String(r) +
                            '): ' +
                            String(n) +
                            ' != ' +
                            String(t) +
                            '.'
                    );
            },
            assertNull: function (n) {
                if (!S.isNull(n))
                    throw new Error('value is not null: ' + String(n) + '.');
            },
            assertObject: function (n) {
                if (!S.isObject(n))
                    throw new Error('value is not object: ' + String(n) + '.');
            },
            assertRegExp: function (n) {
                if (!S.isRegExp(n))
                    throw new Error('value is not regexp: ' + String(n) + '.');
            },
            assertString: function (n) {
                if (!S.isString(n))
                    throw new Error('value is not string: ' + String(n) + '.');
            },
            assertThrows: function (n) {
                y.assertFunction(n);
                try {
                    var t = c.args(arguments, 1);
                    (t = [n, null].concat(t)), c.call.apply(null, t);
                } catch (n) {
                    return;
                }
                throw new Error("value didn't throw error: " + String(n) + '.');
            },
            assertTrue: function (n) {
                if ((y.assertBoolean(n), !0 !== n))
                    throw new Error('value is not true: ' + String(n) + '.');
            },
            assertUndefined: function (n) {
                if (!S.isUndefined(n))
                    throw new Error('value is not undefined: ' + String(n) + '.');
            },
        }),
        (b = {
            DEG_0: 0,
            DEG_90: 90,
            DEG_180: 180,
            DEG_270: 270,
            DEG_360: 360,
            DEG_TO_RAD: Math.PI / 180,
            RAD_TO_DEG: 180 / Math.PI,
            acosDeg: function (n) {
                return Math.acos(n) * b.RAD_TO_DEG;
            },
            angleDeg: function (n, t) {
                return b.atan2Deg(n, t);
            },
            angleRad: function (n, t) {
                return Math.atan2(n, t);
            },
            asinDeg: function (n) {
                return Math.asin(n) * b.RAD_TO_DEG;
            },
            atanDeg: function (n) {
                return Math.atan(n) * b.RAD_TO_DEG;
            },
            atan2Deg: function (n, t) {
                return Math.atan2(n, t) * b.RAD_TO_DEG;
            },
            cosDeg: function (n) {
                return Math.cos(n * b.DEG_TO_RAD);
            },
            cycleDeg: function (n) {
                return d.cycle(n, b.DEG_360);
            },
            degToRad: function (n) {
                return n * b.DEG_TO_RAD;
            },
            fastDeg: function (n, t) {
                var r = t - n;
                return r > b.DEG_180
                    ? -b.DEG_360 + r
                    : r < -b.DEG_180
                    ? b.DEG_360 + t
                    : t;
            },
            haversine: function (n, t, r, e, i) {
                var a,
                    o = b.degToRad,
                    u = o(n),
                    c = o(t),
                    s = o(r),
                    f = s - u,
                    l = o(e) - c,
                    g =
                        Math.sin(f / 2) * Math.sin(f / 2) +
                        Math.cos(u) * Math.cos(s) * Math.sin(l / 2) * Math.sin(l / 2),
                    h = 2 * Math.atan2(Math.sqrt(g), Math.sqrt(1 - g));
                return (a = !1 === i ? 3956 : 6371), d.roundDecimals(a * h, 3);
            },
            hypo: function (n, t) {
                return Math.sqrt(n * n + t * t);
            },
            radToDeg: function (n) {
                return n * b.RAD_TO_DEG;
            },
            sinDeg: function (n) {
                return Math.sin(n * b.DEG_TO_RAD);
            },
            tanDeg: function (n) {
                return Math.tan(n * b.DEG_TO_RAD);
            },
        }),
        (S = {
            ARRAY: 'array',
            BOOLEAN: 'boolean',
            DATE: 'date',
            ERROR: 'error',
            FUNCTION: 'function',
            NAN: 'nan',
            NUMBER: 'number',
            NULL: 'null',
            OBJECT: 'object',
            REGEXP: 'regexp',
            STRING: 'string',
            UNDEFINED: 'undefined',
            UNKNOWN: 'unknown',
            isArray: function (n) {
                return Array.isArray
                    ? Array.isArray(n)
                    : '[object Array]' === Object.prototype.toString.call(n);
            },
            isBase64: function (n) {
                if (S.isString(n))
                    try {
                        if ('' !== t.decode(n)) return !0;
                    } catch (n) {}
                return !1;
            },
            isBoolean: function (n) {
                return 'boolean' == typeof n;
            },
            isDate: function (n) {
                return '[object Date]' === Object.prototype.toString.call(n);
            },
            isError: function (n) {
                return n instanceof Error;
            },
            isFunction: function (n) {
                return 'function' == typeof n;
            },
            isJSON: function (n) {
                if (S.isString(n))
                    try {
                        return h.decode(n), !0;
                    } catch (n) {}
                return !1;
            },
            isNaN: function (n) {
                return m.is(n, NaN);
            },
            isNone: function (n) {
                return S.isUndefined(n) || S.isNull(n) || S.isNaN(n);
            },
            isNumber: function (n) {
                return 'number' == typeof n && !isNaN(n) && isFinite(n);
            },
            isNull: function (n) {
                return null === n;
            },
            isObject: function (n) {
                return (
                    'object' == typeof n &&
                    '[object Object]' === Object.prototype.toString.call(n)
                );
            },
            isRegExp: function (n) {
                return n instanceof RegExp;
            },
            isString: function (n) {
                return 'string' == typeof n;
            },
            isType: function (n) {
                switch (n) {
                    case S.ARRAY:
                    case S.BOOLEAN:
                    case S.DATE:
                    case S.ERROR:
                    case S.FUNCTION:
                    case S.NAN:
                    case S.NUMBER:
                    case S.NULL:
                    case S.OBJECT:
                    case S.REGEXP:
                    case S.STRING:
                    case S.UNDEFINED:
                    case S.UNKNOWN:
                        return !0;
                    default:
                        return !1;
                }
            },
            isUndefined: function (n) {
                return void 0 === n;
            },
            of: function (n) {
                return S.isArray(n)
                    ? S.ARRAY
                    : S.isBoolean(n)
                    ? S.BOOLEAN
                    : S.isDate(n)
                    ? S.DATE
                    : S.isError(n)
                    ? S.ERROR
                    : S.isFunction(n)
                    ? S.FUNCTION
                    : S.isNaN(n)
                    ? S.NAN
                    : S.isNumber(n)
                    ? S.NUMBER
                    : S.isNull(n)
                    ? S.NULL
                    : S.isRegExp(n)
                    ? S.REGEXP
                    : S.isString(n)
                    ? S.STRING
                    : S.isUndefined(n)
                    ? S.UNDEFINED
                    : S.isObject(n)
                    ? S.OBJECT
                    : S.UNKNOWN;
            },
        }),
        {
            array: n,
            base64: t,
            color: a,
            date: o,
            ease: u,
            func: c,
            geom: f,
            hex: l,
            json: h,
            math: d,
            number: p,
            object: m,
            random: v,
            string: N,
            test: y,
            trigo: b,
            type: S,
            xml: {
                removeNamespaces: function (n) {
                    return n.replace(/(\<(.|\n)+?\>)/g, function (n) {
                        return n.replace(/(\s|\<\/?){1}([\w]+\:){1}/g, '$1');
                    });
                },
            },
            url: (M = {
                getParameterByName: function (n, t, r) {
                    var e = M.getParameters(n);
                    return t in e ? e[t] || r || '' : r;
                },
                getParameters: function (n) {
                    return M.getParametersDict(n);
                },
                getParametersDict: function (n) {
                    for (
                        var t, r = M.getParametersList(n), e = {}, i = 0, a = r.length;
                        i < a;
                        i++
                    )
                        e[(t = r[i]).key] = t.value;
                    return e;
                },
                getParametersList: function (n) {
                    for (
                        var t = M.getParametersString(n),
                            r = [],
                            e = /(([\w\-]+){1}(\=([^\&\n\r\t]*){1})?)/g,
                            i = e.exec(t);
                        i;

                    )
                        r.push({ key: i[2], value: decodeURIComponent(i[4] || '') }),
                            (i = e.exec(t));
                    return r;
                },
                getParametersString: function (n) {
                    var t = (n = n || M.getURL()).indexOf('?'),
                        r = t > -1 ? n.substr(t + 1) : '',
                        e = r.indexOf('#');
                    return e > -1 && (r = r.substring(0, e)), r;
                },
                getURL: function () {
                    var n = '';
                    try {
                        n = window.location.href;
                    } catch (n) {}
                    return n;
                },
                hasParameter: function (n, t) {
                    return t in M.getParametersDict(n);
                },
                isFile: function (n) {
                    return 0 === (n || M.getURL()).indexOf('file://');
                },
                isHttp: function (n) {
                    return 0 === (n || M.getURL()).indexOf('http://');
                },
                isHttps: function (n) {
                    return 0 === (n || M.getURL()).indexOf('https://');
                },
                isLocalhost: function (n) {
                    return /^(https?\:\/\/)(localhost|127\.0\.0\.1)(\:[\d]+)?(\/(.)*)?$/.test(
                        n || M.getURL()
                    );
                },
            }),
            utf8: (E = {
                decode: function (n) {
                    return decodeURIComponent(escape(n));
                },
                encode: function (n) {
                    return unescape(encodeURIComponent(n));
                },
            }),
            version: '0.23.2',
        }
    );
});
